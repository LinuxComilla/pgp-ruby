#!/usr/bin/env ruby

nice_cmd = ARGV[0]

CMDS = {
  list:         {aliases: ['list', 'ls'], usage: "list [key-id]"},
  sign:         {aliases: ['sign', 's'], usage: "sign <key-id>"},
  fingerprint:  {aliases: ['fingerprint', 'f'], usage: "fingerprint <key-id>"},
  decrypt:      {aliases: ['decrypt', 'e'], usage: "decrypt <file>"},
  encrypt:      {aliases: ['encrypt', 'e'], usage: "encrypt <file> [for <user>]"},
  help:         {aliases: ['help', '--help', '-?', 'h'], usage: "help [command]"},
  pull:         {aliases: ['pull', 'refresh'], usage: "pull"},
  push:         {aliases: ['push', 'publish'], usage: "push <key-id>"},
  export:       {aliases: ['export', 'write', 'w'], usage: "export <key-id> [file]"},
  import:       {aliases: ['import', 'i'], usage: "import <file>"},
}

def usage(cmd, error=true)
  writer = error ? method(:warn) : method(:puts)
  writer.call "Usage: #{File.basename($0)} #{CMDS[cmd.to_sym][:usage]}"
  exit(1) if error
end

username = ENV['USER']

case
when CMDS[:list][:aliases].include?(nice_cmd)
  if (id = ARGV[1])
    system("gpg --list-key #{id}")
  else
    system("gpg --list-keys")
  end

when CMDS[:sign][:aliases].include?(nice_cmd)
  usage(:sign) unless ARGV[1]

  id = ARGV[1]
  unless system("gpg --list-key #{id}")
    system("gpg --recv-key #{id}")
  end
  system("gpg --fingerprint #{id}")

  puts "\n\nDoes the fingerprint match what you expected? (yes/no)"
  ans = STDIN.gets
  if ans.chomp.downcase == "yes"
    system("gpg --sign-key #{id}") &&
      system("pgp export #{id}")
  end

when CMDS[:fingerprint][:aliases].include?(nice_cmd)
  usage(:fingerprint) unless ARGV[1]

  id = ARGV[1]
  system("gpg --fingerprint #{id}")

when CMDS[:decrypt][:aliases].include?(nice_cmd)
  usage(:decrypt) unless ARGV[1]

  file = ARGV[1]
  system("gpg --decrypt #{file}")

when CMDS[:encrypt][:aliases].include?(nice_cmd)
  usage(:encrypt) unless ARGV[1]

  file = ARGV[1]
  if ARGV[2] == "for" && ARGV[3]
    user = ARGV[3]
    system("gpg --sign --encrypt -r #{user} #{file}")
  else
    system("gpg --sign --encrypt #{file}")
  end

when CMDS[:pull][:aliases].include?(nice_cmd)
  system("gpg --refresh-keys")

when CMDS[:push][:aliases].include?(nice_cmd)
  usage(:push) unless ARGV[1]

  id = ARGV[1]
  system("gpg --send-key #{id}")

when CMDS[:export][:aliases].include?(nice_cmd)
  usage(:export) unless ARGV[1]

  id = ARGV[1]
  file = ARGV[2] || "gpg_#{id}_signed_by_#{username}.asc"
  system("gpg --armor --output '#{file}' --export #{id}")
  puts "Exported signed key to #{file}."

when CMDS[:import][:aliases].include?(nice_cmd)
  usage(:import) unless ARGV[1]

  file = ARGV[1]
  output = `gpg --import '#{file}' 2>&1`
  if $? == 0
    id = output.split(/\n/).first.match(/gpg: key ([^:]+):/)[1]
    puts "Imported signed key from #{file}."
    puts "Publishing updated key to key server..."
    if system("pgp push #{id}")
      puts "Done."
    end
  end

when CMDS[:help][:aliases].include?(nice_cmd)
  if ARGV[1]
    usage(ARGV[1], false)
  else
    puts "Usage: pgp <command> [args...]\n\n"
    puts "Available commands:"
    puts ([''] + CMDS.keys).flatten.join("\n\t")
    puts "\n"
  end

else
  system("gpg #{nice_cmd}")
end

