#!/usr/bin/env ruby

nice_cmd = ARGV[0]

CMDS = {
  list:         ['list', 'ls'],
  sign:         ['sign'],
  fingerprint:  ['fingerprint'],
  encrypt:      ['encrypt'],
  help:         ['help', '--help', '-?'],
  pull:         ['pull', 'refresh'],
  push:         ['push', 'publish'],
  export:       ['export', 'write'],
  import:       ['import'],
}

username = ENV['USER']

case
when CMDS[:list].include?(nice_cmd)
  if (id = ARGV[1])
    system("gpg --list-key #{id}")
  else
    system("gpg --list-keys")
  end

when CMDS[:sign].include?(nice_cmd)
  unless ARGV[1]
    warn "Usage: pgp sign <key-id>"
    exit 1
  end
  id = ARGV[1]
  unless system("gpg --list-key #{id}")
    system("gpg --recv-key #{id}")
  end
  system("gpg --fingerprint #{id}")

  puts "\n\nDoes the fingerprint match what you expected? (yes/no)"
  ans = STDIN.gets
  if ans.chomp.downcase == "yes"
    system("gpg --sign-key #{id}") &&
      system("pgp export #{id}")
  end

when CMDS[:fingerprint].include?(nice_cmd)
  unless ARGV[1]
    warn "Usage: pgp fingerprint <key-id>"
    exit 1
  end
  id = ARGV[1]
  system("gpg --fingerprint #{id}")

when CMDS[:encrypt].include?(nice_cmd)
  unless ARGV[1]
    warn "Usage: pgp encrypt <file> [for <user>]"
    exit 1
  end
  file = ARGV[1]
  if ARGV[2] == "for" && ARGV[3]
    user = ARGV[3]
    system("gpg --sign --encrypt -r #{user} #{file}")
  else
    system("gpg --sign --encrypt #{file}")
  end

when CMDS[:pull].include?(nice_cmd)
  system("gpg --refresh-keys")

when CMDS[:push].include?(nice_cmd)
  unless ARGV[1]
    warn "Usage: pgp push <key-id>"
    exit 1
  end
  id = ARGV[1]
  system("gpg --send-key #{id}")

when CMDS[:export].include?(nice_cmd)
  unless ARGV[1]
    warn "Usage: pgp export <key-id> [file]"
    exit 1
  end
  id = ARGV[1]
  file = ARGV[2] || "gpg_#{id}_signed_by_#{username}.asc"
  system("gpg --armor --output '#{file}' --export #{id}")
  puts "Exported signed key to #{file}."

when CMDS[:import].include?(nice_cmd)
  unless ARGV[1]
    warn "Usage: pgp import <file>"
    exit 1
  end
  file = ARGV[1]
  output = `gpg --import '#{file}' 2>&1`
  if $? == 0
    id = output.split(/\n/).first.match(/gpg: key ([^:]+):/)[1]
    puts "Imported signed key from #{file}."
    puts "Publishing updated key to key server..."
    if system("pgp push #{id}")
      puts "Done."
    end
  end

when CMDS[:help].include?(nice_cmd)
  puts "Usage: pgp <command> [args...]\n\n"
  puts "Available commands:"
  puts ([''] + CMDS.keys).flatten.join("\n\t")
  puts "\n"

else
  system("gpg #{nice_cmd}")
end

